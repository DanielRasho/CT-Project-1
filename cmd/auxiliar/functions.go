/**
 * Funciones auxiliares para el manejo de expresiones regulares y simulaci√≥n de AFN.
 */

package auxiliar

import (
	"fmt"
	"strings"

	io "github.com/DanielRasho/TC-1-ShuntingYard/internal/IO"
	ast "github.com/DanielRasho/TC-1-ShuntingYard/internal/abstract_syntax_tree"
	dfaAutomata "github.com/DanielRasho/TC-1-ShuntingYard/internal/dfa"
	nfaAutomata "github.com/DanielRasho/TC-1-ShuntingYard/internal/nfa"
	runner "github.com/DanielRasho/TC-1-ShuntingYard/internal/runner_simulation"
	shuttingyard "github.com/DanielRasho/TC-1-ShuntingYard/internal/shuntingyard"
)

/*
PrintAllResults muestra todos los resultados asociados a una expresi√≥n regular en particular,
incluyendo la expresi√≥n regular original, la notaci√≥n postfix, el AST y el AFN.
Par√°metros:
- index: √çndice de la expresi√≥n regular en la lista.
- erList: Lista de expresiones regulares.
- postfixList: Lista de notaciones postfix de las expresiones regulares.
- astList: Lista de √°rboles de sintaxis abstracta (AST) generados a partir de las expresiones regulares.
- nfaList: Lista de AFNs generados a partir de los AST.
Retorno: Ninguno.
*/
func PrintAllResults(index int, results []RegexResult) {
	if index < 0 || index >= len(results) {
		fmt.Println("√çndice fuera de rango")
		return
	}

	result := results[index]

	fmt.Printf("==================================\n")
	fmt.Printf("| RESULTADOS PARA LA POSICI√ìN %d |\n", index)
	fmt.Printf("==================================\n")

	// Imprime la expresi√≥n regular le√≠da
	fmt.Printf("\nExpresi√≥n regular le√≠da %d: %s\n", index+1, result.OriginalRegex)

	// Imprime el postfix
	fmt.Printf("\nPostfix: %s\n", result.Postfix)

	// Imprime el AST
	fmt.Println("\nEl AST resultante es:")
	PrintASTTree(result.AST, 0)

	// Imprime el NFA
	fmt.Println("\nEl NFA resultante es:")
	PrintNFA(result.NFA)

	// Imprime el DFA
	fmt.Println("\nEl DFA resultante es:")
	PrintDFA(result.DFA)

	// Imprime el DFA minimizado
	fmt.Println("\nEl DFA minimizado resultante es:")
	PrintDFA(result.DFA_M)
}

/*
PrintASTTree imprime el √°rbol de sintaxis abstracta (AST) de forma recursiva,
mostrando cada nodo y su nivel de profundidad en el √°rbol.
Par√°metros:
- node: Nodo actual del AST.
- level: Nivel de profundidad actual en el √°rbol.
Retorno: Ninguno.
*/
func PrintASTTree(node ast.Node, level int) {
	// Imprime el nodo actual
	switch n := node.(type) {
	case *ast.CharacterNode:
		fmt.Printf("%sCharacterNode: %s\n", indent(level), n.Value)
	case *ast.OperatorNode:
		fmt.Printf("%sOperatorNode: %s\n", indent(level), n.Value)
		for _, operand := range n.GetOperands() {
			PrintASTTree(operand, level+1)
		}
	}
}

/*
PrintNFA imprime la estructura del AFN, mostrando el estado inicial, el estado final,
y todas las transiciones entre estados.

Par√°metros:
  - nfa: Un puntero al AFN que se desea imprimir.

Retorno: Ninguno.
*/
func PrintNFA(nfa *nfaAutomata.NFA) {
	fmt.Printf("Estado inicial: %s\n", nfa.StartState.Name)
	fmt.Printf("Estado final: %s\n", nfa.EndState.Name)
	fmt.Println("Transiciones:")
	for _, t := range nfa.Transitions {
		toStates := make([]string, len(t.To))
		for i, s := range t.To {
			toStates[i] = s.Name
		}
		fmt.Printf("  Desde: %s -> Hasta: [%s] con s√≠mbolo: %s\n", t.From.Name, strings.Join(toStates, ", "), t.Symbol)
	}
}

/*
indent genera un string de indentaci√≥n basado en el nivel de profundidad,
√∫til para formatear la salida de √°rboles o estructuras anidadas.
Par√°metros:
- level: Nivel de profundidad para el cual se desea generar la indentaci√≥n.
Retorno:
- Un string que representa la indentaci√≥n.
*/
func indent(level int) string {
	return strings.Repeat("  ", level)
}

/*
PrintDFA imprime la estructura del DFA, mostrando el estado inicial, los estados finales,
y todas las transiciones entre estados, considerando que cada estado del DFA puede ser un conjunto de estados del NFA.

Par√°metros:
  - dfa: Un puntero al DFA que se desea imprimir.

Retorno: Ninguno.
*/
func PrintDFA(dfa *dfaAutomata.DFA) {
	// Check if the DFA has any states
	if len(dfa.States) == 0 {
		panic("DFA has no states defined.")
	}
	if dfa.StartState == nil {
		panic("NO DFA start states defined.")
	}
	fmt.Printf("Estado inicial: %s\n", dfa.StartState.Name)
	fmt.Println("Estados finales:")
	for _, state := range dfa.States {
		if state.IsFinal {
			fmt.Printf("  %s\n", state.Name)
		}
	}

	fmt.Println("Transiciones:")
	for fromState, transitions := range dfa.Transitions {
		for symbol, toState := range transitions {
			fmt.Printf("  Desde: %s -> Hasta: [%s] con s√≠mbolo: %s\n", fromState.Name, toState.Name, symbol)
		}
	}
}

/*
InteractiveRegexSimulation es una funci√≥n que permite al usuario interactuar con el programa
para convertir expresiones regulares a notaci√≥n postfix, construir un AFN (Aut√≥mata Finito No Determinista)
y luego un AFD (Aut√≥mata Finito Determinista) a partir del AFN. Adem√°s, permite simular el AFN con una cadena
de entrada proporcionada por el usuario para verificar si pertenece al lenguaje definido por la expresi√≥n regular.

El proceso incluye los siguientes pasos:
 1. Solicitar al usuario una expresi√≥n regular.
 2. Convertir la expresi√≥n regular a notaci√≥n postfix usando el algoritmo Shunting Yard.
 3. Construir un AST (√Årbol Sint√°ctico Abstracto) a partir de la notaci√≥n postfix.
 4. Construir un AFN a partir del AST.
 5. Convertir el AFN a un AFD.
 6. Renderizar y guardar la imagen del AFN generado.
 7. Solicitar al usuario una cadena para evaluar contra el AFN.
 8. Simular el AFN con la cadena proporcionada y mostrar el resultado de la simulaci√≥n.

Si el usuario ingresa "0" como expresi√≥n regular, la funci√≥n terminar√° la ejecuci√≥n y saldr√° del bucle.

Par√°metros: Ninguno.

Retorno: Ninguno.
*/
func MyRegex() {
	for {
		fmt.Print("\n‚û°Ô∏è  Ingresa una nueva expresi√≥n regular (utiliza Œµ para cadena vac√≠a) o '0' para salir: ")
		var newRegex string
		fmt.Scanln(&newRegex)

		// Salir si el usuario ingresa "0"
		if newRegex == "0" {
			fmt.Println("\nüö™ Saliendo del programa... üö™")
			break
		}

		// Convierte la expresi√≥n regular a postfix usando Shunting Yard
		postfix, _, _ := shuttingyard.RegexToPostfix(newRegex, false)
		// Construye el AST a partir del postfix
		root := ast.BuildAST(postfix)
		// Construye el AFN a partir del AST
		nfa := nfaAutomata.BuildNFA(root)
		// Construye el AFD
		dfa := dfaAutomata.BuildDFA(nfa)
		//	 Minimizar el AFD
		dfaM := dfaAutomata.MinimizeDFA(dfa)

		// Renderiza el NFA
		nfaFilename := fmt.Sprintf("./graphs/NFA/nfa_%s.png", newRegex)
		err := nfaAutomata.RenderAFN(nfa, nfaFilename)
		if err != nil {
			fmt.Println("Error:", err)
		} else {
			fmt.Printf("\tüåÑ Grafo NFA generado exitosamente como '%s'!\n", nfaFilename)
		}

		// Renderiza el DFA
		dfaFilename := fmt.Sprintf("./graphs/DFA/dfa_%s.png", newRegex)
		err = dfaAutomata.RenderDFA(dfa, dfaFilename)
		if err != nil {
			fmt.Println("Error rendering DFA:", err)
		} else {
			fmt.Printf("\tüåÑ Grafo DFA generado exitosamente como '%s'!\n", dfaFilename)
		}

		// Renderiza el DFA
		dfaMFilename := fmt.Sprintf("./graphs/DFA/dfaMIN_%s.png", newRegex)
		err = dfaAutomata.RenderDFA(dfaM, dfaMFilename)
		if err != nil {
			fmt.Println("Error rendering DFA:", err)
		} else {
			fmt.Printf("\tüåÑ Grafo DFA generado exitosamente como '%s'!\n", dfaFilename)
		}

		// Simular el AFN con una cadena dada por el usuario
		fmt.Print("‚û°Ô∏è  Ingresa la cadena a evaluar: ")
		var cadena string
		fmt.Scanln(&cadena)

		fmt.Printf("\tü§´ Susurro: escogiste la expresi√≥n regular '%s' para leer la cadena '%s'\n", newRegex, cadena)

		// Ejecutar la simulaci√≥n del AFN y AFD con la cadena
		resultado_nfa := runner.RunnerNFA(nfa, cadena)
		resultado_dfa := runner.RunnerDFA(dfaM, cadena)

		// Mostrar el resultado de la simulaci√≥n usando la nueva funci√≥n
		RunnerSimulation(resultado_nfa, resultado_dfa, cadena, newRegex)
	}
}

/*
RunnerSimulation muestra el resultado de la simulaci√≥n del AFN y del AFD con la cadena proporcionada por el usuario.
Dependiendo de si la cadena pertenece al lenguaje definido por la expresi√≥n regular o no, se imprime un mensaje correspondiente para cada uno.

Par√°metros:
  - resultado_dfa: Resultado de la simulaci√≥n del AFD, un booleano que indica si la cadena pertenece o no al lenguaje.
  - resultado_nfa: Resultado de la simulaci√≥n del AFN, un booleano que indica si la cadena pertenece o no al lenguaje.
  - cadena: La cadena de entrada proporcionada por el usuario.
  - regex: La expresi√≥n regular utilizada para la simulaci√≥n.

Retorno: Ninguno.
*/
func RunnerSimulation(resultado_dfa, resultado_nfa bool, cadena, regex string) {
	if resultado_nfa {
		fmt.Printf("‚úÖ (AFN) Resultado de la simulaci√≥n: la cadena '%s' ‚àà L(%s)\n", cadena, regex)
	} else {
		fmt.Printf("‚ùå (AFN) Resultado de la simulaci√≥n: la cadena '%s' ‚àâ L(%s)\n", cadena, regex)
	}

	if resultado_dfa {
		fmt.Printf("‚úÖ (AFD) Resultado de la simulaci√≥n: la cadena '%s' ‚àà L(%s)\n", cadena, regex)
	} else {
		fmt.Printf("‚ùå (AFD) Resultado de la simulaci√≥n: la cadena '%s' ‚àâ L(%s)\n", cadena, regex)
	}

	fmt.Println("\n-----------------------------------------")
}

/*
ProcessRegexFromFile lee expresiones regulares desde un archivo de texto, las convierte en postfix,
construye el AST, genera el NFA y DFA, y finalmente renderiza las im√°genes correspondientes para
cada expresi√≥n regular. Adem√°s, guarda los resultados de cada paso en una lista.

Par√°metros:
  - filePath: Ruta del archivo de texto que contiene las expresiones regulares.

Retorno:
  - []RegexProcessResult: Lista de resultados que incluye la expresi√≥n regular original, su conversi√≥n a postfix,
    el AST generado, el NFA y el DFA.
  - error: Error en caso de que ocurra alg√∫n problema durante la lectura del archivo o el procesamiento de las expresiones.
*/
func RegexFile(filePath string) ([]RegexResult, error) {
	var results []RegexResult

	// Llama a la funci√≥n de lectura de archivo
	lines, err := io.ReaderTXT(filePath)
	if err != nil {
		return nil, err
	}

	// Procesa cada l√≠nea le√≠da del archivo
	for index, line := range lines {
		fmt.Printf("\nExpresi√≥n Regular: %s\n", line)

		// Convertir a postfix
		postfix, _, _ := shuttingyard.RegexToPostfix(line, false)

		// Construir el AST
		root := ast.BuildAST(postfix)

		// Construir el NFA
		nfa := nfaAutomata.BuildNFA(root)

		// Convertir a DFA
		dfa := dfaAutomata.BuildDFA(nfa)

		// Minimizar DFA
		dfaM := dfaAutomata.MinimizeDFA(dfa)

		// Renderizar el NFA
		err := nfaAutomata.RenderAFN(nfa, fmt.Sprintf("./graphs/NFA/nfa_%d_%s.png", index, line))
		if err != nil {
			fmt.Println("Error renderizado de NFA:", err)
		}

		// Renderizar el DFA
		/*
			err = dfaAutomata.RenderDFA(dfaM, fmt.Sprintf("./graphs/DFA/dfa_%d_%s.png", index, line))
			if err != nil {
				fmt.Println("Error rendereizado de DFA:", err)
			}
		*/

		// Agregar el resultado al listado
		results = append(results, RegexResult{
			OriginalRegex: line,
			Postfix:       postfix,
			AST:           root,
			NFA:           nfa,
			DFA:           dfa,
			DFA_M:         dfaM,
		})
	}

	// Imprimir resultados para la primera expresi√≥n regular
	// PrintAllResults(0, results)

	return results, nil
}

/*
RegexProcessResult contiene los resultados del procesamiento de una expresi√≥n regular.

Campos:
  - OriginalRegex: La expresi√≥n regular original le√≠da del archivo.
  - Postfix: La representaci√≥n en postfix de la expresi√≥n regular.
  - AST: El √°rbol sint√°ctico abstracto (AST) construido a partir de la expresi√≥n en postfix.
  - NFA: El aut√≥mata finito no determinista (NFA) generado a partir del AST.
  - DFA: El aut√≥mata finito determinista (DFA) convertido desde el NFA.
*/
type RegexResult struct {
	OriginalRegex string
	Postfix       string
	AST           ast.Node
	NFA           *nfaAutomata.NFA
	DFA           *dfaAutomata.DFA
	DFA_M         *dfaAutomata.DFA
}

/*
MenuForSimulationFromResults muestra un men√∫ con las expresiones regulares procesadas y permite al usuario
seleccionar una para simular su NFA y DFA. Luego, ejecuta la simulaci√≥n y muestra los resultados.

Par√°metros:
  - results: Lista de resultados procesados que incluye las expresiones regulares, el postfix, el AST, el NFA y el DFA.

Retorno:
  - Ninguno.
*/
func MenuRegexFile(results []RegexResult) {
	// Mostrar las expresiones regulares procesadas
	fmt.Println("\nüîç Selecciona una expresi√≥n regular para simular:")
	for i, result := range results {
		fmt.Printf("%d. %s\n", i+1, result.OriginalRegex)
	}

	// Solicitar al usuario seleccionar una opci√≥n
	fmt.Print("‚û°Ô∏è  Ingresa el n√∫mero de la expresi√≥n regular que deseas simular (o '0' para salir): ")
	var choice int
	fmt.Scanln(&choice)

	// Salir si el usuario ingresa "0"
	if choice == 0 {
		fmt.Println("\nüö™ Saliendo del men√∫... üö™")
		return
	}

	// Validar la selecci√≥n del usuario
	if choice < 1 || choice > len(results) {
		fmt.Println("Opci√≥n inv√°lida. Por favor selecciona un n√∫mero v√°lido.")
		return
	}

	// Obtener el resultado de la expresi√≥n regular seleccionada
	selectedResult := results[choice-1]

	// Simular el NFA y DFA con la expresi√≥n regular seleccionada
	fmt.Print("‚û°Ô∏è  Ingresa la cadena a evaluar: ")
	var cadena string
	fmt.Scanln(&cadena)

	fmt.Printf("\tü§´ Susurro: escogiste la expresi√≥n regular '%s' para leer la cadena '%s'\n", selectedResult.OriginalRegex, cadena)

	// Ejecutar la simulaci√≥n del NFA y DFA con la cadena
	resultado_nfa := runner.RunnerNFA(selectedResult.NFA, cadena)
	resultado_dfa := runner.RunnerDFA(selectedResult.DFA_M, cadena)

	// Mostrar el resultado de la simulaci√≥n usando la funci√≥n RunnerSimulation
	RunnerSimulation(resultado_dfa, resultado_nfa, cadena, selectedResult.OriginalRegex)
}
